<?php

/**
 * @file
 * Contains shared.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\Component\Render\FormattableMarkup;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function shared_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the shared module.
    case 'help.page.shared':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Functions shared with others modules') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function shared_theme() {
  return [
    'shared' => [
      'render element' => 'children',
    ],
  ];
}


/**
 * How do I programmatically update the allowed values of a list field?
 * You have to add a function to the field settings.
 * This is not in the field UI, so you have to export the configuration and
 * change the field in field.storage.node.field_recipient.yml
 * type: list_string
 * settings:
 *   allowed_values: {  }
 *   allowed_values_function: 'mymodule_allowed_values_function'
 */
function shared_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  // ----------------------------------------------------------------------------
  // Ajout de l'adresse de l'association au formulaire de contact
  // ----------------------------------------------------------------------------
  if ($definition->get('entity_type') == 'contact_message' && $definition->get('field_name') == 'field_recipient') {
    $allowedValues = $definition->getSetting('allowed_values');
    $mail = \Drupal::config('system.site')->get('mail');
    if (!array_key_exists($mail, $allowedValues)) {
      $allowedValues[$mail] = '1. Association';
    }
    return $allowedValues;
  }

}

function shared_form_contact_message_feedback_form_alter(&$form, FormStateInterface $form_state) {

  $markup = '<p style="border:2px; border-style:solid; border-color:#FF0000; padding: 1em;">';
  $markup .= t('Before sending your question, are you sure that the answer is not in our Frequently Asked Questions (see Frequently Asked Questions in the footer)?');
  $markup .= '</p>';
  $form['warning'] = [
    '#markup' => check_markup($markup, 'full_html'),
    '#weight' => -1,
  ];
  $form['field_recipient']['widget']['#title'] = FALSE;
  $form['field_recipient']['widget']['#prefix'] = t('Recipient') . ' <a class="use-ajax" data-dialog-options="{&quot;width&quot;:440}" data-dialog-type="modal" href="/node/135" id="modal-dialog"><img src="/sites/default/files/images/info.svg"></a>';
  $form['field_recipient']['widget']['#attached'] = ['library' => ['core/drupal.dialog.ajax']];
  $form['field_recipient']['widget']['#sort_options'] = TRUE;
  if (isset($_REQUEST["contract"])) {
    $contractId = $_REQUEST["contract"];
    $form["field_recipient"]["widget"]["#default_value"] = $contractId;
  }
  $form['actions']['preview']['#access'] = FALSE;

}


function shared_mail_alter(&$message) {

  switch ($message['id']) {

    case 'amap_emailfordistributiond':
    case 'amap_emailfordistributionx':
    case "amap_emailforbasket":
    case "amap_emailforstupids":
    case "association_membershipfirstemail":
    case "association_membershipreminderemail":
    case "sel_emailfordeactivatedservices":
    case "sel_emailforexchange":
    case "sel_emailfornewservices":
    case "sel_emailforservicespercategory":
    case "sel_emailforurgentservice":
      $message['headers']['Content-Type'] = "text/html; charset=UTF-8";
      break;
    case "contact_page_mail":
      $contact_message = $message['params']['contact_message'];
      $recipient = $contact_message->get('field_recipient')->getString();
      if (is_numeric($recipient)) {
        $database = \Drupal::database();
        $query = $database->select('contract', 'co');
        $query->leftJoin('users_field_data', 'us', 'us.uid = co.referent_id');
        $query->fields('us', ['mail']);
        $query->fields('co', ['id']);
        $query->condition('co.id', $recipient);
        $results = $query->execute()->fetchCol();
        $recipient = $results[0];
      }
      $message['to'] = $recipient;
      break;
    //----------------------------------------------------------------------
    case "user_register_pending_approval":
    case "user_status_activated":
      $bcc = \Drupal::config('system.site')->get('mail');
      $message['headers']['Bcc'] = $bcc;
      break;
    case "user_password_reset":
    case "user_register_admin_created":
    case "user_register_no_approval_required":
    case "user_status_blocked":
    case "user_status_deleted":
      break;
  }

}

function shared_views_plugins_field_alter(array &$plugins) {

  $plugins['custom']['class'] = 'Drupal\shared\Plugin\views\field\CustomToken';

}

function shared_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch (TRUE) {
    case $form_id == 'views_form_association_sendemails_page_1':
    case $form_id == 'views_form_association_sendemails_page_2':
    case $form_id == 'views_form_association_sendemails_page_3':
      $views_send_to_name = 'nothing_pos_2';
      $views_send_to_mail = 'email_pos_3';
      break;
    case substr($form_id, 0, 47) == 'views_form_amap_contracts_subscriptions_page_1_':
      $views_send_to_name = 'nothing_pos_2';
      $views_send_to_mail = 'email_pos_4';
      $form_id = 'views_form_amap_contracts_subscriptions_page_1_';
      break;
    default:
      break;
  }

  switch ($form_id) {
    case 'views_form_amap_contracts_subscriptions_page_1_':
    case 'views_form_association_sendemails_page_1':
    case 'views_form_association_sendemails_page_2':
    case 'views_form_association_sendemails_page_3':

      switch ($form_state->get('step')) {

        case 'views_form_views_form':
          break;

        case 'views_send_config_form':
          $oCurrentUser = \Drupal::currentUser();
          $person = \Drupal::entityTypeManager()
            ->getStorage('person')
            ->load($oCurrentUser->id());
          $sNomPrenom = $person->label();
          $sMail = $person->get('email')
            ->getString();
          $currentUserRoles = $oCurrentUser->getRoles();
          $bReferentDistrib = (in_array("referent_of_distribution", $currentUserRoles)) ? TRUE : FALSE;
          $aFromName = [
            0 => '<Veuillez choisir une valeur dans la liste>',
            1 => $sNomPrenom,
          ];
          if (in_array("secretary", $currentUserRoles)) {
            $aFromName[2] = 'Le Jardin de Poissy';
          }
          if (in_array("referent_of_contract", $currentUserRoles)) {
            $aFromName[3] = 'L\'AMAP du Jardin de Poissy';
          }
          if (in_array("referent_of_meeting", $currentUserRoles)) {
            $aFromName[4] = 'Le Grenier à SÉL';
          }

          $form['from']['views_send_from_name_bis'] = [
            '#attributes' => [
              'onchange' => 'hasChanged(this)',
            ],
            '#type' => 'select',
            '#options' => $aFromName,
            '#default_value' => 0,
            '#required' => TRUE,
            '#weight' => -99,
          ];
          $form['from']['views_send_from_name'] = [
            '#attributes' => [
              'id' => 'edit-views-send-from-name',
            ],
            '#type' => 'hidden',
          ];
          $form['from']['views_send_from_mail'] = [
            '#attributes' => [
              'readonly' => 'readonly',
            ],
            '#type' => 'textfield',
            '#default_value' => '',
          ];
          $form['from']['views_send_from_mail_currentuser'] = [
            '#attributes' => [
              'id' => 'edit-views-send-from-mail-currentuser',
            ],
            '#type' => 'hidden',
            '#maxlength' => 255,
            '#default_value' => $sMail,
          ];
          $form['to']['#type'] = 'hidden';
          $form['to']['views_send_to_name']['#default_value'] = $views_send_to_name;
          $form['to']['views_send_to_mail']['#default_value'] = $views_send_to_mail;
          $form['mail']['views_send_subject'] = [
            '#type' => 'textfield',
            '#maxlength' => 255,
            '#title' => t('Subject'),
            '#default_value' => '',
            '#required' => TRUE,
          ];
          $form['mail']['views_send_message'] = [
            '#type' => 'text_format',
            '#format' => "plain_text",
            '#rows' => 10,
            '#title' => t('Message'),
            '#default_value' => '',
            '#required' => TRUE,
          ];
          $form['mail']['token']['#type'] = 'hidden';
          $form['mail']['views_send_attachments']['#description'] = NULL;
          $form['additional']['#type'] = 'hidden';
          $form['views_send_remember']['#type'] = 'hidden';
          $form['views_send_direct']['#default_value'] = 0;
          $form['views_send_direct']['#type'] = 'hidden';
          $form['#attached']['library'][] = 'shared/masscontact';
          break;

        case 'views_send_confirm_form':
          $form['headers']['#type'] = 'hidden';
          break;

        default:
      }
      break;

    default:

  }

}

function shared_node_access(NodeInterface $node, $op, AccountInterface $account) {

  switch ($node->type->target_id) {
    case 'article':
    case 'page':
    case 'evenement':
    case 'gallery':

      if ($op == 'view') {

        $tags = $node->get('field_tags')->referencedEntities();
        foreach ($tags as $tag) {
          if ($tag->tid->value == 7) { // 7=Privé
            if ($account->isAnonymous()) {
              return \Drupal\Core\Access\AccessResult::forbidden();
            }
            else {
              return \Drupal\Core\Access\AccessResult::allowed();
            }
          }
        }

      }
      break;
    default:
  }

}

/**
 * replaced by shared_form_user_login_form_alter and
 * shared_user_login_form_submit from
 * https://www.thesavvyfew.com/insights/how-redirect-user-after-login-drupal-proper-way
 *
 * function shared_user_login($account)
 * {
 * $currentUrl = \Drupal::service('path.current')->getPath();
 * if ($currentUrl && (substr($currentUrl, 0, 12) == '/user/reset/')) {
 * return;
 * }
 * $response = new RedirectResponse('/');
 * $response->send();
 * exit;
 * }
 */

function shared_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $currentUrl = \Drupal::service('path.current')->getPath();
  if ($currentUrl && (substr($currentUrl, 0, 12) == '/user/reset/')) {
    return;
  }
  $form['#submit'][] = 'shared_user_login_form_submit';
}

function shared_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

function shared_preprocess_node__page(array &$variables) {

  /*
   * Replaced by a script in /node/25
   * Update 4.27
   *
    if ($variables['node']->nid->value == 25) {
      $variables['#attached']['library'][] = 'shared/modal';
    }
   */

}

function shared_send_email($message) {

  $sModule = $message['module'];
  $sKey = $message['key'];
  $sTo = $message['to'];
  $sLangcode = isset($message['langcode']) ? $message['langcode'] : 'fr';
  $aParams = $message['params'];
  $sReply = $message['reply'];
  $bSend = isset($message['send']) ? $message['send'] : TRUE;

  if ($sTo == 'batch') {
    $aRecipients = explode(', ', $aParams[0]);
    $i = 0;
    foreach ($aRecipients as $sRecipient) {
      $aTo[$i] = $sRecipient;
      $i++;
    }
    $iMax = $i;
    $aParams[0] = NULL;
  }
  else {
    $aTo[0] = $sTo;
    $iMax = 1;
  }
  for ($i = 0; $i < $iMax; $i++) {
    $result = \Drupal::service('plugin.manager.mail')
      ->mail($sModule, $sKey, $aTo[$i], $sLangcode, $aParams, $sReply, $bSend);
    if ($result) {
      $aResults['OK'][] = $aTo[$i];
    }
    else {
      $aResults['KO'][] = $aTo[$i];
    }
  }
  return $aResults;
}

/*
 * Replaced by Social Icons in theme MiliPro
 * Update 4.39
 *
function shared_link_alter(&$variables)
{
  if ($variables["url"]->isExternal()) {
    if ($variables['text'] == "facebook_for_jdp") {
      $variables['options']['attributes']['target'] = '_blank';
      $variables['options']['attributes']['aria-label'] = $variables['text'];
      $variables['text'] = new FormattableMarkup('<i class="fab fa-facebook-square" aria-hidden="true"></i>', []);
    }
    if ($variables['text'] == "instagram_for_jdp") {
      $variables['options']['attributes']['target'] = '_blank';
      $variables['options']['attributes']['aria-label'] = $variables['text'];
      $variables['text'] = new FormattableMarkup('<i class="fab fa-instagram-square" aria-hidden="true"></i>', []);
    }
  }
}
 */
