<?php

/**
 * @file
 * Contains amap.module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;

use Drupal\Core\Render\Element;

use Drupal\Core\Cache\Cache;

const AMAP_AMAPIEN_PER_DISTRIBUTION = 5;
const AMAP_RESERVE_PER_DISTRIBUTION = 1;
const AMAP_REFERENT_PER_DISTRIBUTION = 1;
const AMAP_AMAPIEN_PER_DISTRIBUTION_MIN = 3;
const AMAP_REFERENT_PER_DISTRIBUTION_MIN = 1;

function amap_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the amap module.
    case 'help.page.amap':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('To manage the AMAP of the Jardin de Poissy.') . '</p>';
      return $output;

    default:
  }
}

function amap_theme() {
  return [
    'amap' => ['render element' => 'children',],
    'basket' => ['render element' => 'elements',],
  ];
}

function amap_allowed_values_function(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {

  \Drupal::moduleHandler()->loadInclude('amap', 'inc', 'amap.allowed.values');

  if ($definition['entity_type'] == 'distribution_inscription') {
    switch ($definition['field_name']) {
      case 'role':
        return amap_distribution_inscription_role();
        break;
      default:
        break;
    }
  }
  if ($definition['entity_type'] == 'basket') {
    switch ($definition['field_name']) {
      case 'product':
        return amap_distribution_products();
        break;
      default:
        break;
    }
  }
}

/*
 * Replaced by a link in node/194
 * Update 4.39
 *
function amap_link_alter(&$variables) {
  if ($variables['text'] == 'Nos producteurs') {
    $variables['options']['attributes'] = ['target' => '_blank'];
  }
}
 */

function amap_entity_insert(EntityInterface $entity) {
  $mode = 'insert';
  switch ($entity->getEntityType()->id()) {
    case "contract":
      _handleContractFiles($entity, $mode);
      _setReferentOfContract();
      break;
    case "contract_subscription":
      _handleContractSubscriptionFiles($entity, $mode);
      break;
    case "basket":
      _publishModalBourseauxpaniers();
      break;

    default:
  }
}

function amap_entity_update(EntityInterface $entity) {
  $mode = 'update';
  switch ($entity->getEntityType()->id()) {
    case "contract":
      _handleContractFiles($entity, $mode);
      _setReferentOfContract();
      break;
    case "contract_subscription":
      _handleContractSubscriptionFiles($entity, $mode);
      break;
    case "basket":
      _publishModalBourseauxpaniers();
      break;

    default:
  }
}

function amap_entity_delete(EntityInterface $entity) {
  $mode = 'delete';
  switch ($entity->getEntityType()->id()) {
    case "contract":
      $id = $entity->id();
      $result = \Drupal::entityQuery('contract_subscription')
        ->accessCheck(FALSE)
        ->condition('contract_id', $id, '=')
        ->execute();
      foreach ($result as $key => $value) {
        $entity = \Drupal::entityTypeManager()
          ->getStorage('contract_subscription')
          ->load($value);
        $entity->delete();
      }
      _handleContractFiles($entity, $mode);
      _setReferentOfContract();
      break;
    case "contract_subscription":
      _handleContractSubscriptionFiles($entity, $mode);
      break;
    case "basket":
      _publishModalBourseauxpaniers();
      break;

    default:
  }
}

/*
function amap_file_download($uri) {

  $pathinfo = pathinfo($uri);
  if ($pathinfo['extension'] != 'pdf') {
    $sFileName = \Drupal::service('file_system')->basename($uri);
    return [
      'Content-disposition' => 'attachment; filename="' . $sFileName . '"',
    ];
  }

}
 */


function amap_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  switch ($view->id()) {
    case 'amap_contracts_subscriptions':
      switch ($display_id) {
        case 'rest_export_1':
          $sContract = $view->args['0'];
          $oContract = \Drupal::entityTypeManager()
            ->getStorage('contract')
            ->load($sContract);
          $sContractType = $oContract->get('type')->getString();
          $aContractType = _detail_contract_type($sContractType);
          $iNumberOfQuantities = $aContractType[1];
          $aContractExportHeader = $aContractType[3];

          $fields = $view->display_handler->getOption('fields');
          $s01 = 'quantity01';
          $sMin = 'quantity' . sprintf("%02d", $iNumberOfQuantities + 1);
          $sMax = 'quantity' . sprintf("%02d", count($fields));
          foreach ($fields as $key => $value) {
            if ($key >= $s01 && $key < $sMin) {
              // Remplacer le nom des champs quantity concernés par ce type de contrat
              $i = (int) str_replace("quantity", "", $key);
              $newLabel = $aContractExportHeader[$i - 1];
              $view->setHandlerOption($view->current_display, 'field', $key, 'label', $newLabel);
            }
            elseif ($key >= $sMin && $key <= $sMax) {
              // Supprimer les champs quantity non concernés par ce type de contrat
              $view->removeHandler($view->current_display, 'field', $value['field']);
            }
            else {
            }
          }
          break;
        default:
      }
      break;
    case 'amap_distributions':
      switch ($display_id) {
        case 'page_1':
          _list_distribution_products($aProducts, $sMin, $sMax);
          $fields = $view->display_handler->getOption('fields');
          foreach ($fields as $key => $value) {
            if ($key >= $sMin && $key <= $sMax) {
              // Remplacer le nom des champs product
              $i = (int) str_replace("product", "", $key);
              $newLabel = $aProducts[$i];
              $view->setHandlerOption($view->current_display, 'field', $key, 'label', $newLabel);
            }
            elseif ($key > $sMax && $key <= 'product99') {
              // Supprimer les champs product en trop
              $view->removeHandler($view->current_display, 'field', $value['field']);
            }
            else {
            }
          }
          break;
        default:
      }
      break;
    default:
  }

}

function amap_views_pre_render(ViewExecutable $view) {

  switch ($view->id()) {
    case 'amap_distributions':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'amap/list-of-distributions';
          break;
        default:
      }
    case 'amap_contracts':
      switch ($view->current_display) {
        case 'page_1':
        case 'page_2':
          $view->element['#attached']['library'][] = 'amap/list-of-contracts';
          $view->element['#attached']['library'][] = 'core/drupal.dialog.ajax';
          break;
        default:
      }
      break;
    default:
  }

}

function amap_views_post_execute(ViewExecutable $view) {
  switch ($view->id()) {
    case 'amap_planning':
      switch ($view->current_display) {
        case 'page_1':
        case 'page_2':
          $rank = 0;
          $numberofinscriptions = 0;
          foreach ($view->result as $row) {
            if ($row->distribution_inscription_id == $numberofinscriptions) {
              $row->distribution_inscription_created = 0;
            }
            else {
              $rank++;
              $numberofinscriptions = $row->distribution_inscription_id;
              $row->distribution_inscription_created = $rank;
            }
          }
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }

}

function _detail_contract_type($sContractType) {

  $oContractType = \Drupal::entityTypeManager()
    ->getStorage('contract_type')
    ->load($sContractType);
  $name = $oContractType->name->value;
  $numberofquantities = $oContractType->numberofquantities->value;

  $aContractTypeHeader = explode('£', $oContractType->get('formheader')
    ->getString());
  $iMax = count($aContractTypeHeader);
  for ($i = 0; $i < $iMax; $i++) {
    if (strpos($aContractTypeHeader[$i], '|')) {
      $aTemp2 = explode('|', $aContractTypeHeader[$i]);
      $aContractTypeHeader[$i] = [
        'data' => $aTemp2[0],
        'colspan' => $aTemp2[1],
      ];
    }
  }
  $aContractExportHeader = explode('£', $oContractType->get('exportheader')
    ->getString());

  return [
    $name,
    $numberofquantities,
    $aContractTypeHeader,
    $aContractExportHeader,
  ];

}

function _export_amap_CSV($view, $page, $contract) {
  $view = \Drupal\views\Views::getView($view);
  $view->setDisplay($page);
  $path = $view->getPath();

  $sFileName = str_replace("cid", $contract, $path);
  $view->setArguments([$contract]);

  $data = $view->preview($page)['#markup'];
  \Drupal::service('file_system')
    ->saveData($data, 'private://contracts/' . $sFileName, FileSystemInterface::EXISTS_REPLACE);
}

function _handleContractFiles(EntityInterface $entity, $mode) {
  _deleteUnusedFiles();
  switch ($mode) {
    case 'insert':
    case 'update':
      $sTemp = 'Contract-' . $entity->id() . '-' . str_replace("-", "", $entity->startdate->value);
      $file1Id = $entity->get('file1')->target_id;
      if ($file1Id != 0) {
        $file1 = \Drupal\file\Entity\File::load($file1Id);
        $uri1 = $file1->uri->value;
        $filename1 = $file1->filename->value;
        $pathinfo = pathinfo($uri1);
        $filename1new = $sTemp . '.' . $pathinfo['extension'];
        $uri1new = str_replace($pathinfo['basename'], $filename1new, $uri1);
        $file1->setFilename($filename1new);
        $file1->setFileUri($uri1new);
        $file1->save();
        rename($uri1, $uri1new);
      }
      $file2Id = $entity->get('file2')->target_id;
      if ($file2Id != 0) {
        $file2 = \Drupal\file\Entity\File::load($file2Id);
        $uri2 = $file2->uri->value;
        $filename2 = $file2->filename->value;
        $pathinfo = pathinfo($uri2);
        $filename2new = $sTemp . '.pdf';
        $uri2new = str_replace($pathinfo['basename'], $filename2new, $uri2);
        $file2->setFilename($filename2new);
        $file2->setFileUri($uri2new);
        $file2->save();
        rename($uri2, $uri2new);
      }
      break;
    case 'delete':
      break;
    default:
  }
}

function _deleteUnusedFiles() {
  $query = \Drupal::database()->select('file_managed', 'fm')
    ->fields('fm', ['fid'])
    ->condition('fm.status', 0);
  $fids = $query->execute()->fetchCol();
  $files = \Drupal\file\Entity\File::loadMultiple($fids);
  foreach ($files as $file) {
    $references = \Drupal::service('file.usage')->listUsage($file);
    if (empty($references)) {
      $file->delete();
    }
  }
}

function _handleContractSubscriptionFiles(EntityInterface $entity, $mode) {
  switch ($mode) {
    case 'insert':
    case 'update':
      $fileId = $entity->get('file')->target_id;
      if ($fileId != 0) {
        $file = \Drupal\file\Entity\File::load($fileId);
        $uri = $file->uri->value;
        $filename = $file->filename->value;
        $pathinfo = pathinfo($uri);
        $directory = 'private://contracts/subscriptions/' . $entity->contract_id->target_id;
        \Drupal::service('file_system')
          ->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
        $filenamenew = $entity->member_id->target_id . '.' . $pathinfo['extension'];
        $urinew = $directory . '/' . $filenamenew;
        rename($uri, $urinew);
        $file->setFilename($filenamenew);
        $file->setFileUri($urinew);
        $file->save();
      }
      break;
    case 'delete':
      break;
    default:
  }

}

function _setReferentOfContract() {
  $prefix = '2. AMAP';
  $fieldStorage = \Drupal\field\Entity\FieldStorageConfig::loadByName('contact_message', 'field_recipient');
  $allowedValues = $fieldStorage->getSetting('allowed_values');
  foreach ($allowedValues as $key => $value) {
    if (strncmp($value, $prefix, strlen($prefix)) == 0) {
      if ($value != $prefix) {
        unset($allowedValues[$key]);
      }
    }
  }

  $usersWhoAreReferentOfContract = \Drupal::entityQuery('user')
    ->accessCheck(FALSE)
    ->condition('roles', 'referent_of_contract')
    ->execute();

  $database = \Drupal::database();
  $query = $database->select('contract', 'co');
  $query->leftJoin('contract_type', 'ct', 'ct.id = co.type');
  $query->leftJoin('users_field_data', 'us', 'us.uid = co.referent_id');
  $query->fields('us', ['uid', 'mail']);
  $query->fields('co', ['id', 'isvisible']);
  $query->fields('ct', ['displayedname']);
  $query->condition('isvisible', 1);
  $query->orderBy('displayedname', 'ASC');
  $query->distinct();
  $results = $query->execute();

  $usersWhoShouldBeReferentOfContract = [];
  foreach ($results as $result) {
    $allowedValues[$result->id] = $prefix . ' ' . $result->displayedname;
    $usersWhoShouldBeReferentOfContract[] = $result->uid;
  }

  $fieldStorage->setSetting('allowed_values', $allowedValues);
  $fieldStorage->save();

  $toBeRemoved = array_diff($usersWhoAreReferentOfContract, $usersWhoShouldBeReferentOfContract);
  $users = User::loadMultiple($toBeRemoved);
  foreach ($users as $user) {
    $user->removeRole('referent_of_contract');
    $user->save();
  }

  $toBeAdded = array_diff($usersWhoShouldBeReferentOfContract, $usersWhoAreReferentOfContract);
  foreach ($toBeAdded as $item) {
    if (!is_null($item)) {
      $user = User::load($item);
      $user->addRole('referent_of_contract');
      $user->save();
    }
  }

}

function _list_distribution_products(&$aProducts, &$sMin, &$sMax) {
  \Drupal::moduleHandler()->loadInclude('amap', 'inc', 'amap.allowed.values');
  $aProducts = amap_distribution_products();
  $sMin = 'product01';
  $sMax = 'product' . sprintf("%02d", count($aProducts));
}

function amap_cron() {

  // ----------------------------------------------------------------------------
  // Ajout de l'adresse de l'AMAP au formulaire de contact
  // ----------------------------------------------------------------------------
  $fieldStorage = \Drupal\field\Entity\FieldStorageConfig::loadByName('contact_message', 'field_recipient');
  $allowedValues = $fieldStorage->getSetting('allowed_values');
  if (array_key_exists('amap@lejardindepoissy.org', $allowedValues) == FALSE) {
    $allowedValues['amap@lejardindepoissy.org'] = '2. AMAP';
    $fieldStorage->setSetting('allowed_values', $allowedValues);
    $fieldStorage->save();
  }

  // ----------------------------------------------------------------------------
  // Envoi du courriel 'Rappel pour les étourdis'
  // ----------------------------------------------------------------------------
  $dNextEmailForStupids = \Drupal::state()->get('amap.NextEmailForStupids', '');
  $dToday = date('Y-m-d H:i:s');
  if ($dToday > $dNextEmailForStupids) {
    _sendEmailForStupids();
  }
  else {
    \Drupal::logger('amap')
      ->info('email for stupids: nothing to do.');
  }

  // ----------------------------------------------------------------------------
  // Envoi du courriel 'Relance pour la prochaine distribution'
  // ----------------------------------------------------------------------------
  $dEmailForNextDistribution = \Drupal::state()
    ->get('amap.EmailForNextDistribution', '');
  $dToday = date('Y-m-d H:i:s');
  if ($dToday > $dEmailForNextDistribution) {
    _sendEmailsForNextDistribution();
  }
  else {
    \Drupal::logger('amap')
      ->info('email for next distribution: nothing to do.');
  }

  // ----------------------------------------------------------------------------
  // Pour désactiver le modal 'bourse_aux_paniers' si aucun panier n'est
  // disponible à cause de dates de distribution dépassées
  // ----------------------------------------------------------------------------
  _publishModalBourseauxpaniers();

}

function _setAmapien() {

  $usersWhoAreAmapien = \Drupal::entityQuery('user')
    ->accessCheck(FALSE)
    ->condition('roles', 'amapien')
    ->execute();

  $sToday = DrupalDateTime::createFromTimestamp(strtotime("now"), new \DateTimeZone('Europe/Paris'))
    ->format('Y-m-d');
  $database = \Drupal::database();
  $query = $database->select('contract_subscription', 'cs');
  $query->leftJoin('contract', 'ct', 'ct.id = cs.contract_id');
  $query->leftJoin('member', 'me', 'me.id = cs.member_id');
  $query->leftJoin('person', 'pe', 'pe.member_id = me.id');
  $query->fields('pe', ['id']);
  $query->condition('ct.startdate', $sToday, '<=');
  $query->condition('ct.enddate', $sToday, '>=');
  $query->condition('me.status', [2, 3, 4], 'IN');
  $query->distinct();
  $usersWhoShouldBeAmapien = $query->execute()->fetchCol();

  $toBeRemoved = array_diff($usersWhoAreAmapien, $usersWhoShouldBeAmapien);
  $users = User::loadMultiple($toBeRemoved);
  foreach ($users as $user) {
    $user->removeRole('amapien');
    $user->save();
  }

  $toBeAdded = array_diff($usersWhoShouldBeAmapien, $usersWhoAreAmapien);
  foreach ($toBeAdded as $item) {
    if (!is_null($item)) {
      $user = User::load($item);
      $user->addRole('amapien');
      $user->save();
    }
  }

}

function _sendEmailForStupids() {

  $aD = [];
  $aR = [];
  $aX = [];
  $sTo = "";

  $sNextWednesday = DrupalDateTime::createFromTimestamp(strtotime("next Wednesday", strtotime("Yesterday")), new \DateTimeZone('Europe/Paris'))
    ->format('Y-m-d');
  $database = \Drupal::database();
  $query = $database->select('distribution_date', 'amdd');
  $query->leftJoin('distribution_inscription', 'amdi', 'amdi.distributiondate_id = amdd.id');
  $query->leftJoin('person', 'ap', 'ap.id = amdi.amapien_id');
  $query->fields('amdd', ['id', 'distributiondate', 'numberofproducts'])
    ->fields('amdi', ['id', 'distributiondate_id', 'amapien_id', 'role'])
    ->fields('ap', ['id', 'lastname', 'firstname', 'cellphone', 'email'])
    ->condition('numberofproducts', 0, '>')
    ->condition('distributiondate', $sNextWednesday, '=')
    ->orderBy('role', 'ASC')
    ->orderBy('lastname', 'ASC')
    ->orderBy('firstname', 'ASC');
  $results = $query->execute();
  foreach ($results as $key => $result) {
    $sCellphone = $result->cellphone;
    $sTemp = $result->firstname . " " . $result->lastname . " - " . $sCellphone;
    switch ($result->role) {
      case "D":
        $aD[] = $sTemp;
        break;
      case "R":
        $aR[] = $sTemp;
        break;
      case "X":
        $aX[] = $sTemp;
        break;
      default:
    }
    if (strpos($sTo, $result->email) === FALSE) {
      $sTo .= $result->email . ", ";
    }
  }
  $sTo = substr($sTo, 0, strlen($sTo) - 2);
  $aD2 = array_count_values($aD);
  $sD = "";
  foreach ($aD2 as $key => $value) {
    switch ($value) {
      case 1:
        $sD .= $key;
        break;
      default:
        $sD .= $key . " (" . $value . " personnes)";
        break;
    }
    $sD .= ", ";
  }
  $sD = substr($sD, 0, strlen($sD) - 2);
  $sX = implode(", ", $aX);
  setlocale(LC_TIME, "fr_FR.UTF-8");
  $sNextWednesday = DrupalDateTime::createFromTimestamp(strtotime("next Wednesday", strtotime("Yesterday")), new \DateTimeZone('Europe/Paris'))
    ->format('l j F Y');

  $aParams = [$sNextWednesday, $sD, $sX];

  $message = [
    'module' => 'amap',
    'key' => 'emailforstupids',
    'to' => $sTo,
    'params' => $aParams,
    'reply' => 'L\'AMAP du Jardin de Poissy',
  ];
  $aResults = shared_send_email($message);

  $sNextMonday = DrupalDateTime::createFromTimestamp(strtotime("next Monday"), new \DateTimeZone('Europe/Paris'))
    ->format('Y-m-d H-i-s');
  \Drupal::state()->set('amap.NextEmailForStupids', $sNextMonday);
  \Drupal::logger('amap')->info('email \'Rappel pour les étourdis\': sent.');
}

function _sendEmailsForNextDistribution() {

  $sNextWednesday = DrupalDateTime::createFromTimestamp(strtotime("next Wednesday"), new \DateTimeZone('Europe/Paris'))
    ->format('Y-m-d');
  $database = \Drupal::database();
  $query = $database->select('distribution_date', 'amdd');
  $query->leftJoin('distribution_inscription', 'amdi', 'amdi.distributiondate_id = amdd.id');
  $query->fields('amdd', ['id', 'distributiondate', 'numberofproducts'])
    ->fields('amdi', ['id', 'distributiondate_id', 'amapien_id', 'role'])
    ->condition('distributiondate', $sNextWednesday, '=')
    ->orderBy('role', 'ASC');
  $results = $query->execute()->fetchAll();

  if ((count($results) > 0) && ($results[0]->numberofproducts > 0)) {
    $D = 0;
    $X = 0;
    foreach ($results as $key => $result) {
      switch ($result->role) {
        case "D":
          $D++;
          break;
        case "X":
          $X++;
          break;
        default:
      }
    }

    if ($D < AMAP_AMAPIEN_PER_DISTRIBUTION_MIN) {
      $role = 'amapien';
      $key = 'emailfordistributiond';
      $info = 'email for next distribution (AMAPiens): ';
      _sendEmailsForNextDistributionPerRole($role, $key, $info, $D, $X);
    }
    if ($X < AMAP_REFERENT_PER_DISTRIBUTION_MIN) {
      $role = 'referent_of_distribution';
      $key = 'emailfordistributionx';
      $info = 'email for next distribution (Referents): ';
      _sendEmailsForNextDistributionPerRole($role, $key, $info, $D, $X);
    }
  }
  else {
    \Drupal::logger('amap')
      ->info('email for next distribution: nothing to do.');
  }

  if (date("l") == "Thursday") {
    $sNextDay = DrupalDateTime::createFromTimestamp(strtotime("next Sunday"), new \DateTimeZone('Europe/Paris'))
      ->format('Y-m-d H-i-s');
  }
  else {
    $sNextDay = DrupalDateTime::createFromTimestamp(strtotime("next Thursday"), new \DateTimeZone('Europe/Paris'))
      ->format('Y-m-d H-i-s');
  }
  \Drupal::state()->set('amap.EmailForNextDistribution', $sNextDay);

}

function _sendEmailsForNextDistributionPerRole($role, $key, $info, $D, $X) {
  setlocale(LC_TIME, "fr_FR.UTF-8");
  $sNextWednesday = DrupalDateTime::createFromTimestamp(strtotime("next Wednesday"), new \DateTimeZone('Europe/Paris'))
    ->format(' j F Y');
  $aParams = ['', $sNextWednesday, $D, $X];
  $message = [
    'module' => 'amap',
    'key' => '',
    'to' => 'batch',
    'params' => $aParams,
    'reply' => 'L\'AMAP du Jardin de Poissy',
  ];

  $users = \Drupal::entityQuery('user')
    ->accessCheck(FALSE)
    ->condition('roles', $role)
    ->execute();
  $users = User::loadMultiple($users);
  $sRecipients = '';
  foreach ($users as $user) {
    $sRecipients .= $user->getEmail() . ", ";
  }
  $sRecipients = substr($sRecipients, 0, strlen($sRecipients) - 2);
  $message['key'] = $key;
  $message['params'][0] = $sRecipients;
  $aResults = shared_send_email($message);
  \Drupal::logger('amap')
    ->info('@title@number emails sent, @number2 emails not sent.', [
      '@title' => $info,
      '@number' => isset($aResults['OK']) ? count($aResults['OK']) : 0,
      '@number2' => isset($aResults['KO']) ? count($aResults['KO']) : 0,
    ]);
}

function amap_mail($key, &$message, $params) {

  $sFrom = 'amap@lejardindepoissy.org';
  $message['headers'] = [
    'From' => '"L\'AMAP du Jardin de Poissy"<amap@lejardindepoissy.org>',
    'Sender' => $sFrom,
    'Return-Path' => $sFrom,
  ];
  switch ($key) {
    case 'emailforstupids':
      $message['headers']['bcc'] = $sFrom;
      $message['subject'] = '[L\'AMAP du Jardin de Poissy] Distribution du ' . $params[0] . ' - Rappel pour les étourdis';
      $sBody = "<b>" . $params[0] . "</b>.";
      $sBody .= "<br><br>Sont charg&eacute;s de la <i>Distribution</i> : " . $params[1];
      $sBody .= "<br><i>est R&eacute;f&eacute;rent</i> : " . $params[2];
      $sBody .= "<br><br>En cas d'indisponibilit&eacute; de derni&eacute;re minute, vous devez pr&eacute;venir le « R&eacute;f&eacute;rent ».";
      if (date("W") % 2 == 1) {
        $sBody .= "<br><br><span style=\"color:red;\">N'oubliez pas de sortir la grande poubelle &agrave; couvercle jaune en fin de distribution.</span>";
      }
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
    case 'emailfordistributiond':
      $message['subject'] = '[L\'AMAP du Jardin de Poissy] La distribution du ' . $params[1] . ' manque de bras';
      $sBody = "<b>" . $params[1] . "</b>, ";
      switch ($params[2]) {
        case 0:
          $sBody .= "personne n'est inscrit pour la distribution.";
          break;
        case 1:
          $sBody .= "une seule personne est inscrite pour la distribution.";
          break;
        default:
          $sBody .= $params[2] . " personnes seulement sont inscrites pour la distribution.";
          break;
      }
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
    case 'emailfordistributionx':
      $message['subject'] = '[L\'AMAP du Jardin de Poissy] La distribution du ' . $params[1] . ' manque de référent';
      $sBody = "<b>" . $params[1] . "</b>, aucun référent de distribution n'est inscrit.";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
    case 'emailforbasket':
      $message['subject'] = '[L\'AMAP du Jardin de Poissy] Bourse aux paniers';
      $sBody = $params[1]['firstname'] . " " . $params[1]['lastname'] . " (" . $params[1]['cellphone'] . " - " . $params[1]['email'] . "), l'« Acheteur », déclare être intéressé(e) par le panier #" . $params[2] . " proposé par le « Vendeur ».<br>";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
  }
}

/**
 * Prepares variables for basket templates.
 *
 * Default template: basket.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the basket information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_basket(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function _publishModalBourseauxpaniers() {
  /*
    ----------------------------------------------------------------------------
    Mise à jour du texte et activation du modal 'bourse_aux_paniers'
    selon le nombre de paniers proposés
    ----------------------------------------------------------------------------
   */
  $modal = \Drupal::entityTypeManager()
    ->getStorage('modal')
    ->load('bourse_aux_paniers');

  $today = DrupalDateTime::createFromTimestamp(strtotime("now"), new \DateTimeZone('Europe/Paris'))
    ->format('Y-m-d');
  $query = \Drupal::database()->select('basket', 'ba');
  $query->leftJoin('distribution_date', 'dd', 'dd.id = ba.distributiondate');
  $query->fields('dd', ['distributiondate']);
  $query->orderBy('distributiondate', 'ASC');
  $query->condition('dd.distributiondate', $today, '>=');
  $numberofbaskets = (int) $query->countQuery()->execute()->fetchField();
  switch ($numberofbaskets) {
    case 0:
      $modal->setBody([
        'value' => 'Aucun panier n\'est disponible dans la Bourse aux paniers !',
        'format' => 'full_html',
      ]);
      $modal->setPublished(FALSE);
      break;
    case 1:
      $modal->setBody([
        'value' => 'Un panier est disponible dans la Bourse aux paniers !',
        'format' => 'full_html',
      ]);
      $modal->setPublished(TRUE);
      break;
    default:
      $modal->setBody([
        'value' => 'Des paniers sont disponibles dans la Bourse aux paniers !',
        'format' => 'full_html',
      ]);
      $modal->setPublished(TRUE);
      break;
  }
  $modal->save();
  Cache::invalidateTags(['modal_page:' . $modal->id()]);

}

function _update_sos_distrib() {
  /*
    ----------------------------------------------------------------------------
    Mise à jour du contenu de la page SOS Distrib
    ----------------------------------------------------------------------------
   */
  $path = \Drupal::service('path_alias.manager')
    ->getPathByAlias('/sos', 'fr');
  if (strpos($path, '/node/') === 0) {
    $nid = str_replace('/node/', '', $path);
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node) {

      $oNow = DrupalDateTime::createFromTimestamp(strtotime("now"), new \DateTimeZone('Europe/Paris'));
      if ($oNow->format('w') == 3) { // Today is Wednesday
        $oNextWednesday = $oNow->modify('+7 days');
      }
      else {
        $oNextWednesday = $oNow->modify('next Wednesday');
      }

      $sNextWednesday = $oNextWednesday->format('Y-m-d');
      $database = \Drupal::database();
      $query = $database->select('distribution_date', 'amdd');
      $query->leftJoin('distribution_inscription', 'amdi', 'amdi.distributiondate_id = amdd.id');
      $query->leftJoin('person', 'ap', 'ap.id = amdi.amapien_id');
      $query->fields('amdd', ['id', 'distributiondate', 'numberofproducts'])
        ->fields('amdi', ['id', 'distributiondate_id', 'amapien_id', 'role'])
        ->fields('ap', ['id', 'lastname', 'firstname', 'cellphone', 'email'])
        ->condition('numberofproducts', 0, '>')
        ->condition('distributiondate', $sNextWednesday, '=')
        ->condition('role', 'X', '=');
      $results = $query->execute()->fetchAssoc();

      $sNextWednesday = $oNextWednesday->format('j F', ['langcode' => 'fr']);
      $body = '<div class="text-align-center"><p>Distribution du ' . $sNextWednesday . '</p>';

      if ($results == FALSE) {
        $body .= '<p>Aucun référent n\'est inscrit !</p>';
      }
      else {
        $body .= '<p>Le référent est&nbsp;<br>';
        $body .= $results['firstname'] . ' ' . $results['lastname'] . '<br>';
        $body .= '<a href="mailto:' . $results['email'] . '">' . $results['email'] . '</a><br>';
        $body .= '<a href="tel:' . $results['cellphone'] . '">' . $results['cellphone'] . '</a></p>';
      }
      $body .= '<p>Et n\'oubliez pas !<br>Vous pouvez toujours solliciter un de vos voisins AMAPiens.<br>Ils habitent <a href="https://www.google.com/maps/d/embed?mid=15gqRpt0QExfFmmd2cpuxiQZxLXLFsRUd" target="_blank"> ici </a> .</p></div>';
      $node->body->value = $body;
      $node->save();

      \Drupal::logger('amap')->info('Node SOS Distrib updated.');
    }
    else {
      \Drupal::logger('amap')->alert('Node SOS Distrib not found.');
    }
  }

}
