<?php

/**
 * @file
 * Contains association.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Cache\Cache;

function association_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    // Main module help for the association module.
    case 'help.page.association':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('To manage members and persons of the association.') . '</p>';
      return $output;

    default:
  }

}

function association_theme() {

  return [
    'association' => [
      'render element' => 'children',
    ],
  ];

}

function association_allowed_values_function(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {

  \Drupal::moduleHandler()
    ->loadInclude('association', 'inc', 'association.allowed.values');

  if ($definition['entity_type'] == 'member') {
    switch ($definition['field_name']) {
      case 'country':
        return association_member_country();
        break;
      case 'status':
        return association_member_status();
        break;
      default:
        break;
    }
  }

}

function association_cron() {

  /*
   * Mise à jour du CA étendu
   */
  $usersWhoAreExtentedCA = \Drupal::entityQuery('user')
    ->accessCheck(FALSE)
    ->condition('roles', 'extended_ca')
    ->execute();

  $usersWhoShouldBeExtentedCA = \Drupal::entityQuery('user')
    ->accessCheck(FALSE)
    ->condition('roles', [
      'ca',
      'community_manager',
      'referent_of_meeting',
      'referent_of_contract',
      'referent_of_distribution',
    ], 'IN')
    ->execute();

  $toBeRemoved = array_diff($usersWhoAreExtentedCA, $usersWhoShouldBeExtentedCA);
  $users = User::loadMultiple($toBeRemoved);
  foreach ($users as $user) {
    $user->removeRole('extended_ca');
    $user->save();
  }

  $toBeAdded = array_diff($usersWhoShouldBeExtentedCA, $usersWhoAreExtentedCA);
  foreach ($toBeAdded as $item) {
    if (!is_null($item)) {
      $user = User::load($item);
      $user->addRole('extended_ca');
      $user->save();
    }
  }

  /*
   * Vérification de la personne Contact des adhérents
   */
  $database = \Drupal::database();
  $query = $database->select('member', 'am');
  $query->leftJoin('person', 'ap', 'ap.id = am.contact_id');
  $query->fields('am', ['id', 'status'])->fields('ap', [
    'id',
  ]);
  $query->condition('status', 0, '>');
  $query->isNull('ap.id');
  $results = $query->execute();
  $errors = 0;
  $membersWithError = '';
  foreach ($results as $key => $result) {
    $membersWithError .= $result->id . '-';
    $errors++;
  }
  if ($errors != 0) {
    $membersWithError = substr($membersWithError, 0, strlen($membersWithError) - 1);
    $message = t('Missing contact for @text: @membersWithError', [
      '@text' => \Drupal::translation()
        ->formatPlural($errors, 'this member', 'these members'),
      '@membersWithError' => $membersWithError,
    ]);
    \Drupal::logger('association')
      ->error($message);
  }

  /*
    Mise à jour du compte à rebours pour l'AGO
   */
  $modal = \Drupal::entityTypeManager()
    ->getStorage('modal')
    ->load('compte_a_rebours_ago');

  if ($modal->getPublished()) {
    $today = DrupalDateTime::createFromTimestamp(strtotime("now"), new \DateTimeZone('Europe/Paris'))
      ->format('Ymd');
    $body = $modal->getBody()['value'];
    $delay = substr($body, 4, 8) - $today;
    $start= strpos($body, '<span>')+6;
    $end = strpos($body, '</span>');
    $body = substr_replace($body, 'J-' . $delay, $start, $end - $start);
    $modal->setBody([
      'value' => $body,
      'format' => 'full_html',
    ]);
    $modal->save();
    Cache::invalidateTags(['modal_page:' . $modal->id()]);
  }

}

function association_entity_delete(EntityInterface $entity) {

  $mode = 'delete';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      _deletePersonsOfMember($entity);
      break;

    case "person":
      // Reset corresponding Member if is Contact
      if ($entity->iscontact->value) {
        $storage = Drupal::entityTypeManager()->getStorage('member');
        $member = $storage->load($entity->member_id->target_id);
        if ($member) {
          $member->set("contact_id", NULL);
          $member->save();
        }
      }
      // Delete the corresponding user
      $user_id = $entity->user_id->target_id;
      $userofperson = User::load($user_id);
      if ($userofperson) {
        $userofperson->delete();
      }
      break;

    default:
  }
  _export_association($entityType);

}

function association_entity_insert(EntityInterface $entity) {

  $mode = 'insert';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      break;

    case "person":
      break;

    default:
  }
  _export_association($entityType);

}

function association_entity_presave(EntityInterface $entity) {

  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      if ($entity->status->value == -1) {
        $entity->designation = t('Member') . sprintf("%03d", $entity->id->value);
        $entity->addresssupplement = NULL;
        $entity->street = NULL;
        $entity->city = NULL;
        $entity->country = NULL;
        $entity->telephone = NULL;
        $entity->status = 0;
        $entity->contact_id = NULL;
        $entity->comment = NULL;
        $entity->owner_id = NULL;
        _deletePersonsOfMember($entity);
      }
      break;

    default:
  }

}

function association_entity_update(EntityInterface $entity) {

  $mode = 'update';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      /*
       * This code is here to be executed either from Update in CRUD form or from MemberImportStatus
       */
      switch ($entity->status->value) {
        case -2:
          $entity->delete();
          break;
        case 0:
          // List all Persons for this Member
          $id = $entity->id->value;
          $database = Drupal::database();
          $query = $database->select('person', 'ap');
          $query->fields('ap', ['id', 'member_id'])
            ->condition('member_id', $id, '=');
          $results = $query->execute();
          // Deactivate all these Persons
          $storage = Drupal::entityTypeManager()->getStorage('person');
          foreach ($results as $key => $result) {
            $person = $storage->load($result->id);
            $person->set("isactive", 0);
            $person->save();
          }
          break;
        default:
      }
      break;

    case "person":
      if ($entity->isactive->value == 0) {
        //Block the corresponding user
        $user_id = $entity->user_id->target_id;
        $userofperson = User::load($user_id);
        $userofperson->set("status", 0);
        $userofperson->save();
      }
      break;

    case "user":
      $storage = Drupal::entityTypeManager()->getStorage('person');
      $person = $storage->load($entity->uid->value);
      if ($person) {
        if ($person->email->value <> $entity->mail->value) {
          $person->email = $entity->mail->value;
          $person->save();
        }
      }
      break;

    default:
  }
  _export_association($entityType);

}

function association_mail($key, &$message, $aParams) {

  $sFrom = Drupal::config('system.site')->get('mail');
  $message['headers'] = [
    //  'From' => '"Le Jardin de Poissy"<contact@lejardindepoissy.org>',
    'Sender' => $sFrom,
    'Return-Path' => $sFrom,
  ];
  switch ($key) {
    case 'membershipfirstemail':
      $message['subject'] = '[le Jardin de Poissy] Renouvellement d\'adhésion';
      $sBody = "<b>" . $aParams[1] . "</b>";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
    case 'membershipreminderemail':
      $message['subject'] = '[le Jardin de Poissy] Renouvellement d\'adhésion - Relance ' . $aParams[2];
      $sBody = "<b>" . $aParams[1] . "</b>";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
  }
}

function association_menu_local_tasks_alter(&$data, $route_name) {

  $oCurrentUser = Drupal::currentUser();
  switch ($route_name) {
    case 'view.association_members_and_persons.page_1':
    case 'view.association_members.page_1':
    case 'view.association_persons.page_1':
      if ($oCurrentUser->hasPermission('administer users')) {
        $data['tabs'][0]['association.people'] = [
          '#theme' => 'menu_local_task',
          '#link' => [
            'title' => t('Users'),
            'url' => Url::fromRoute('entity.user.collection'),
          ],
          '#weight' => 4,
        ];
      }
      break;
    default:
  }

}

function association_views_pre_render(ViewExecutable $view) {

  switch ($view->id()) {
    case 'association_members':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'association/LoM';
          break;
        default:
      }
      break;
    case 'association_persons':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'association/LoP';
          break;
        default:
      }
      break;
    case 'association_members_and_persons':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'association/LoMP';
          break;
        default:
      }
      break;
    default:
  }

}

function association_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  switch ($view->id()) {
    case 'association_sendemails':
      if ($view->current_display == 'page_1') {
        $roles = Drupal::currentUser()->getRoles();
        if (in_array('administrator', $roles)) {
          foreach ($query->where as $condition_group_key => &$condition_group) {
            foreach ($condition_group['conditions'] as $condition_key => &$condition) {
              if ($condition['field'] == 'member_person.status') {
                unset($query->where[$condition_group_key]['conditions'][$condition_key]);
              }
            }
          }
        }
      }
      break;

    default:
  }

}

function _updatePersonToContact($entity) {

  $user_id = $entity->user_id->target_id;
  // List all other persons for the current member
  $member_id = $entity->member_id->target_id;
  $iId = $entity->id->value;
  $database = Drupal::database();
  $query = $database->select('person', 'ap');
  $query->fields('ap', ['id', 'member_id'])
    ->condition('id', $iId, '<>')
    ->condition('member_id', $member_id, '=');
  $results = $query->execute();
  // Undefine "Contact for Member" for these persons
  $storageP = Drupal::entityTypeManager()->getStorage('person');
  foreach ($results as $key => $result) {
    $person = $storageP->load($result->id);
    $person->iscontact = 0;
    $person->save();
    $usertemp = User::load($result->id);
    $usertemp->removeRole('contact_for_member');
    $usertemp->save();
  }
  // Define the current Person as "Contact for Member"
  $storageM = Drupal::entityTypeManager()->getStorage('member');
  $member = $storageM->load($member_id);
  $member->contact_id = $user_id;
  $entity->iscontact = 1;
  $entity->save();
  $usertemp = User::load($user_id);
  $usertemp->addRole('contact_for_member');
  $usertemp->save();

}

function _deletePersonsOfMember($entity) {

  // List all Persons for this Member
  $id = $entity->id->value;
  $database = Drupal::database();
  $query = $database->select('person', 'ap');
  $query->fields('ap', ['id', 'member_id'])
    ->condition('member_id', $id, '=');
  $results = $query->execute();
  // Delete all these Persons
  $storage = Drupal::entityTypeManager()->getStorage('person');
  foreach ($results as $key => $result) {
    $person = $storage->load($result->id);
    $person->delete();
  }

}

function _export_association_CSV($view, $page) {

  $view = Views::getView($view);
  $view->setDisplay($page);
  $path = $view->getPath();
  $data = $view->preview($page)['#markup'];
  \Drupal::service('file_system')
    ->saveData($data, 'private://' . $path, FileSystemInterface::EXISTS_REPLACE);

}

function _export_association($entityType) {

  switch ($entityType) {
    case "member":
      _export_association_CSV('association_members', 'rest_export_1');
      _export_association_CSV('association_persons', 'rest_export_3');
      _export_association_CSV('association_members_and_persons', 'rest_export_1');
      break;
    case "person":
      _export_association_CSV('association_persons', 'rest_export_1');
      _export_association_CSV('association_persons', 'rest_export_2');
      _export_association_CSV('association_members_and_persons', 'rest_export_1');
      break;
    default:
  }

}

function _existsEmail($email, $destination) {

  $database = Drupal::database();
  $query = $database->select('users_field_data', 'us');
  $query->leftJoin('person', 'ap', 'ap.id = us.uid');
  $query->leftJoin('member', 'am', 'am.id = ap.member_id');
  $query->fields('us', ['uid', 'name', 'mail']);
  $query->fields('am', ['status']);
  $query->condition('us.mail', $email, '=');
  $results = $query->execute()->fetchAll();
  if (count($results) == 0) {
    $output = FALSE;
  }
  else {
    $url = Url::fromUri('base:/user/login', ['query' => ['destination' => $destination]]);
    $link = \Drupal\Core\Link::fromTextAndUrl(t('here'), $url)->toString();
    switch ($results[0]->status) {
      case NULL:
        $output = FALSE;
        break;
      case "3":
      case "4":
        $output = [
          t('This email is already registered for « %user ».<br>You are an active member, please log in %link.', [
            '%user' => $results[0]->name,
            '%link' => $link,
          ]),
          4,
        ];
        break;
      case "5":
        $output = [
          t('This email is already registered for « %user ».<br>You have an ongoing request for membership, no need to do a new request.', [
            '%user' => $results[0]->name,
          ]),
          5,
        ];
        break;
      default:
        \Drupal::logger('association')
          ->notice('<pre>' . print_r($results, TRUE) . '</pre>');
        break;
    }
  }

  return $output;

}
